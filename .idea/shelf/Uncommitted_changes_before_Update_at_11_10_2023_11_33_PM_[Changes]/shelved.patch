Index: ../calebsgooglescraper/main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../calebsgooglescraper/main.py b/../calebsgooglescraper/main.py
new file mode 100644
--- /dev/null	(date 1699547954882)
+++ b/../calebsgooglescraper/main.py	(date 1699547954882)
@@ -0,0 +1,107 @@
+from bs4 import BeautifulSoup
+from selenium import webdriver
+from webdriver_manager.chrome import ChromeDriverManager
+
+import pandas as pd
+
+import json
+
+chrome_options = webdriver.ChromeOptions()
+chrome_options.add_argument("--headless")
+
+options = webdriver.ChromeOptions()  # Initializing Chrome Options from the Webdriver
+options.add_experimental_option("useAutomationExtension", False)  # Adding Argument to Not Use Automation Extension
+options.add_experimental_option("excludeSwitches", ["enable-automation"])  # Excluding enable-automation Switch
+options.add_argument("disable-popup-blocking")
+options.add_argument("disable-notifications")
+options.add_argument('--disable-blink-features=AutomationControlled')
+
+import os
+
+driver_path = os.path.join(os.path.dirname(__file__), 'drivers', 'chromedriver')
+driver = webdriver.Chrome(executable_path=driver_path, options=options)
+
+def slow_type(pageElem, pageInput):
+    for letter in pageInput:
+        time.sleep(float(random.uniform(.05, .3)))
+        pageElem.send_keys(letter)
+
+
+query = ""
+
+yurles = []
+titles = []
+summaries = []
+ranking = []
+keywords = []
+features = []
+
+
+def get_search_results(query):
+    n_pages = 2
+    rank = 0
+    for page in range(1, n_pages):
+        url = "http://www.google.com/search?q=" + query + "&start=" + str((page - 1) * 10) + "&sa=N&filter=0&ved=2ahUKEwiKzK_0w4_1AhUqnuAKHW-kDNs4ggEQ8NMDegQIARBJ&biw=969&bih=647&dpr=1.38"
+        driver.get(url)
+        soup = BeautifulSoup(driver.page_source, 'html.parser')
+
+        pretty_soup = soup.prettify()
+        # print(pretty_soup)
+        search = soup.find_all('div', class_="yuRUbf")
+        for h in search:
+            rank += 1
+            ranking.append(rank)
+            yurles.append(h.a.get('href'))
+            title_element = h.find('h3')
+            titles.append(title_element.text)
+            keywords.append(query)
+            # heading_data = heading.text
+            # titles.append(heading_data)
+
+        search_sum = soup.find_all("div", "Z26q7c UK95Uc uUuwM")
+        for j in search_sum:
+            # print(j)
+            '''
+            try:
+                fs = j.select('div[class="CR33Se"]')
+                fs != ''
+                features.append('true')
+            except:
+                features.append('false')
+            '''
+            # print(j)
+            # meta_description = j.find_all(attrs={"data-content-feature": "1"})
+            # rso > div:nth-child(3) > div > div > div:nth-child(2) > div > span
+            # meta_description = j.find(attrs={"data-content-feature": "1"})
+            summary = ''
+            for node in j:
+                # print(node)
+                summary += (''.join(node.findAll(text=True)))
+                print(summary)
+
+            # meta_description = meta_description
+            # print(meta_description)
+            summaries.append(summary)
+
+
+print(yurles)
+print(titles)
+print(summaries)
+
+with open('history_queries.json') as f:
+    data = json.load(f)
+
+    print(data)
+
+queries = data['queries']
+
+for query in queries:
+    get_search_results(query)
+
+driver.close()
+
+df = pd.DataFrame(list(zip(keywords, yurles, titles, summaries, ranking)))
+
+print(df.head)
+
+df.to_csv('search_results2.csv')
\ No newline at end of file
Index: ../lsg2/spin_cycle/spinner/templates/spinner/home.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{% extends \"spinner/base.html\" %}\r\n{% block title %}Spin Cycle{% endblock %}\r\n{% block content %}\r\n<h2>Projects</h2>\r\n<a href=\"{% url 'projectcreate'%}\"><button class=\"btn\">Add Project</button></a>\r\n<table id=\"owners\">\r\n  <tr>\r\n    <th>Project ID</th>\r\n    <th>Brand</th>\r\n    <th>Locations</th>\r\n    <th>Pieces Prepared</th>\r\n    <th>Pieces Outlined</th>\r\n    <th>Pieces Generated</th>\r\n    <th> </th>\r\n    <th> </th>\r\n    <th> </th>\r\n    <th> </th>\r\n  </tr>\r\n  {% for project in project_list %}\r\n  <tr>\r\n      <td class=\"stack\">{{ project.project_id }}</td>\r\n      <td class=\"stack\">{{ project.brand }}</td>\r\n      <td class=\"stack\">{{ project.locations }}</td>\r\n      <td class=\"stack\">{{ project.num_pieces_prepared }}</td>\r\n      <td class=\"stack\">{{ project.num_pieces_outlined }}</td>\r\n      <td class=\"stack\">{{ project.num_pieces_generated }}</td>\r\n      <td class=\"stack\"><a href=\"{% url 'project_update_view' project.id %}\"><button>Edit</button></a></td>\r\n      <td class=\"stack\"><a href=\"{% url 'project_delete_view' project.id %}\"><button>Delete</button></a></td>\r\n      <td class=\"stack\"><a href=\"{% url 'project_detail_view' project.id %}\"><button>View</button></a></td>\r\n      <td class=\"stack\"><a href=\"{% url 'piece_inputs_for_project' project.id %}\">Add/Edit Pieces</a></td>\r\n  </tr>\r\n  {% endfor %}\r\n</table>\r\n{% endblock %}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../lsg2/spin_cycle/spinner/templates/spinner/home.html b/../lsg2/spin_cycle/spinner/templates/spinner/home.html
--- a/../lsg2/spin_cycle/spinner/templates/spinner/home.html	(revision 2e2f2ac8dc45930e657c4725ae9a6088cbab3662)
+++ b/../lsg2/spin_cycle/spinner/templates/spinner/home.html	(date 1698676615032)
@@ -27,7 +27,7 @@
       <td class="stack"><a href="{% url 'project_update_view' project.id %}"><button>Edit</button></a></td>
       <td class="stack"><a href="{% url 'project_delete_view' project.id %}"><button>Delete</button></a></td>
       <td class="stack"><a href="{% url 'project_detail_view' project.id %}"><button>View</button></a></td>
-      <td class="stack"><a href="{% url 'piece_inputs_for_project' project.id %}">Add/Edit Pieces</a></td>
+      <td class="stack"><a href="{% url 'piece_inputs' project.id %}">Add/Edit Pieces</a></td>
   </tr>
   {% endfor %}
 </table>
Index: ../.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/lsg2/spin_cycle/venv/\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../.gitignore b/../.gitignore
--- a/../.gitignore	(revision 2e2f2ac8dc45930e657c4725ae9a6088cbab3662)
+++ b/../.gitignore	(date 1698676615042)
@@ -1,1 +1,2 @@
 /lsg2/spin_cycle/venv/
+.idea
\ No newline at end of file
Index: ../lsg2/spin_cycle/spinner/models.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.db import models\r\nfrom django.urls import reverse\r\n\r\n# Create your models here.\r\nclass Project(models.Model):\r\n    project_id = models.CharField(max_length=200)\r\n    brand = models.CharField(max_length=200)\r\n    location = models.CharField(max_length=200)\r\n\r\n    def get_absolute_url(self):\r\n        return reverse('project_detail_view', args=[str(self.id)])\r\n\r\nclass PieceInputs(models.Model):\r\n    project = models.ForeignKey(Project, on_delete=models.CASCADE)\r\n    piece_name = models.CharField(max_length=200)\r\n    keyword = models.CharField(max_length=200)\r\n    location = models.CharField(max_length=200)\r\n    old_content_link = models.URLField(blank=True, null=True)\r\n    include_data = models.CharField(max_length=255, blank=True, null=True)\r\n    csvs = models.FileField(upload_to='csvs/', blank=True, null=True)\r\n\r\n    def get_absolute_url(self):\r\n        return reverse('piece_inputs_detail_view', args=[str(self.id)])\r\n\r\nclass PieceBackground(models.Model):\r\n    piece_inputs = models.ForeignKey(PieceInputs, on_delete=models.CASCADE)\r\n    outline = models.TextField()\r\n    research = models.TextField()\r\n\r\n    def get_absolute_url(self):\r\n        return reverse('piece_background_detail_view', args=[str(self.id)])\r\n\r\nclass Piece(models.Model):\r\n    piece_inputs = models.ForeignKey(PieceInputs, on_delete=models.CASCADE)\r\n    content = models.TextField()\r\n\r\n    def get_absolute_url(self):\r\n        return reverse('piece_detail_view', args=[str(self.id)])\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../lsg2/spin_cycle/spinner/models.py b/../lsg2/spin_cycle/spinner/models.py
--- a/../lsg2/spin_cycle/spinner/models.py	(revision 2e2f2ac8dc45930e657c4725ae9a6088cbab3662)
+++ b/../lsg2/spin_cycle/spinner/models.py	(date 1698676614957)
@@ -36,3 +36,14 @@
 
     def get_absolute_url(self):
         return reverse('piece_detail_view', args=[str(self.id)])
+
+
+class CSVUpload(models.Model):
+    project = models.ForeignKey(Project, on_delete=models.CASCADE)
+    uploaded_file = models.FileField(upload_to='csvs/')
+    uploaded_at = models.DateTimeField(auto_now_add=True)
+
+    def get_absolute_url(self):
+        return reverse('csv_upload_detail_view', args=[str(self.id)])
+    def __str__(self):
+        return f"CSV for {self.project.name} uploaded at {self.uploaded_at}"
Index: ../lsg2/spin_cycle/spinner/views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.shortcuts import render, redirect\r\nfrom django.http import HttpResponse\r\nfrom django.urls import reverse_lazy\r\nfrom django.views.generic import ListView, DetailView, CreateView, UpdateView, DeleteView\r\nfrom django.db.models import Count\r\nimport csv\r\n\r\nfrom .models import Project, PieceBackground, Piece, PieceInputs\r\nfrom .forms import ProjectCreateForm, PieceInputsForm\r\n\r\ndef home(request):\r\n    return redirect('project_list')\r\n\r\nclass ProjectList(ListView):\r\n    model = Project\r\n    template_name = 'spinner/home.html'\r\n    context_object_name = 'project_list'\r\n\r\n    def get_queryset(self):\r\n        return Project.objects.annotate(\r\n            num_pieces_prepared=Count('pieceinputs'),\r\n            num_pieces_outlined=Count('pieceinputs__piecebackground'),\r\n            num_pieces_generated=Count('pieceinputs__piece')\r\n        )\r\n\r\nclass ProjectCreate(CreateView):\r\n    model = Project\r\n    template_name = 'spinner/project_create_form.html'\r\n    form_class = ProjectCreateForm\r\n\r\n    def get_success_url(self):\r\n        return reverse_lazy('project_list')\r\n\r\nclass ProjectDetailView(DetailView):\r\n    model = Project\r\n    template_name = 'spinner/project_detail.html'\r\n\r\nclass ProjectUpdate(UpdateView):\r\n    model = Project\r\n    template_name = 'spinner/project_update_form.html'\r\n    form_class = ProjectCreateForm\r\n\r\n    def get_success_url(self):\r\n        return reverse_lazy('project_detail_view', args=[self.object.id])\r\n\r\nclass ProjectDelete(DeleteView):\r\n    model = Project\r\n    template_name = 'spinner/project_confirm_delete.html'\r\n    success_url = reverse_lazy('project_list')\r\n\r\ndef handle_csv_upload(csv):\r\n    csv_reader = csv.reader(csv)\r\n    for row in csv_reader:\r\n        print(row)\r\n        if row[0] == 'keyword':\r\n            continue\r\n        else:\r\n            keyword = row[0]\r\n            location = row[1]\r\n            old_content_link = row[2]\r\n            include_data = row[3]\r\n            # csvs should be the name of hte csv file\r\n            csvs = csv\r\n            piece_inputs = PieceInputs.objects.create(keyword=keyword, location=location, old_content_link=old_content_link, include_data=include_data, csvs=csvs)\r\n            piece_inputs.save()\r\n\r\n\r\n\r\n\r\nfrom django.forms import formset_factory\r\n\r\ndef piece_inputs(request, pk):\r\n    project = Project.objects.get(id=pk)\r\n    PieceFormSet = formset_factory(PieceInputsForm, extra=1)  # This allows you to create multiple pieces. `extra=1` will display 1 empty form by default.\r\n\r\n    if request.method == 'POST':\r\n        formset = PieceFormSet(request.POST, prefix='piece')\r\n        if formset.is_valid():\r\n            for form in formset:\r\n                if form.cleaned_data:\r\n                    piece = form.save(commit=False)\r\n                    piece.project = project\r\n                    piece.save()\r\n\r\n                    # If there's a CSV upload field in each form\r\n                    if 'csv_file' in form.cleaned_data:\r\n                        handle_csv_upload(form.cleaned_data['csv_file'])\r\n\r\n            return redirect('project_detail_view', pk=pk)\r\n    else:\r\n        formset = PieceFormSet(queryset=PieceInputs.objects.none(), prefix='piece', initial=[{'project': project}])\r\n    return render(request, 'spinner/piece_inputs_form.html', {'formset': formset})\r\n\r\ndef piece_backgrounds(pk):\r\n    project = Project.objects.get(id=pk)\r\n    piece_inputs = PieceInputs.objects.filter(project=project)\r\n    for piece_input in piece_inputs:\r\n        piece_background = PieceBackground.objects.create(piece_input=piece_input)\r\n        piece_background.save()\r\n    return redirect('project_detail_view', pk=pk)\r\n\r\ndef piece_inputs_for_project(request, project_id):\r\n    # Your view logic here\r\n    pass\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../lsg2/spin_cycle/spinner/views.py b/../lsg2/spin_cycle/spinner/views.py
--- a/../lsg2/spin_cycle/spinner/views.py	(revision 2e2f2ac8dc45930e657c4725ae9a6088cbab3662)
+++ b/../lsg2/spin_cycle/spinner/views.py	(date 1698676614984)
@@ -4,9 +4,11 @@
 from django.views.generic import ListView, DetailView, CreateView, UpdateView, DeleteView
 from django.db.models import Count
 import csv
+from django.shortcuts import get_object_or_404
+from django.forms import modelformset_factory
 
-from .models import Project, PieceBackground, Piece, PieceInputs
-from .forms import ProjectCreateForm, PieceInputsForm
+from .models import Project, PieceBackground, Piece, PieceInputs, CSVUpload
+from .forms import ProjectCreateForm, PieceInputsForm, UploadCSVForm
 
 def home(request):
     return redirect('project_list')
@@ -65,31 +67,58 @@
             piece_inputs.save()
 
 
+import csv
+from django.core.exceptions import ValidationError
+
+def upload_csv(request, project_id):
+    project = get_object_or_404(Project, id=project_id)
+
+    if request.method == "POST":
+        form = UploadCSVForm(request.POST, request.FILES)
+        if form.is_valid():
+            csv_file = form.cleaned_data['uploaded_file']
+            csv_upload = CSVUpload(project=project, uploaded_file=csv_file)
+            csv_upload.save()
+
+            # Process CSV
+            file_data = csv_file.read().decode("utf-8")
+            lines = file_data.split("\n")
+            reader = csv.DictReader(lines)
+
+            for row in reader:
+                if not row:  # skip empty lines
+                    continue
+                try:
+                    # You may need to adjust the field names depending on your CSV column names.
+                    PieceInputs.objects.create(
+                        project=project,
+                        piece_name=row['piece_name'],
+                        keyword=row['keyword'],
+                        location=row['location'],
+                        old_content_link=row.get('old_content_link', ''),
+                        include_data=row.get('include_data', ''),
+                        csvs=row.get('csvs', ''),
+                    )
+                except ValidationError:
+                    # Handle validation errors if needed, e.g., if a required field is missing in the CSV.
+                    pass
+
+            return redirect('project_detail_view', pk=project_id)
+
+    else:
+        form = UploadCSVForm()
+
+    return render(request, 'spinner/upload_csv.html', {'form': form, 'project': project})
 
 
 from django.forms import formset_factory
 
 def piece_inputs(request, pk):
-    project = Project.objects.get(id=pk)
-    PieceFormSet = formset_factory(PieceInputsForm, extra=1)  # This allows you to create multiple pieces. `extra=1` will display 1 empty form by default.
-
-    if request.method == 'POST':
-        formset = PieceFormSet(request.POST, prefix='piece')
-        if formset.is_valid():
-            for form in formset:
-                if form.cleaned_data:
-                    piece = form.save(commit=False)
-                    piece.project = project
-                    piece.save()
-
-                    # If there's a CSV upload field in each form
-                    if 'csv_file' in form.cleaned_data:
-                        handle_csv_upload(form.cleaned_data['csv_file'])
-
-            return redirect('project_detail_view', pk=pk)
-    else:
-        formset = PieceFormSet(queryset=PieceInputs.objects.none(), prefix='piece', initial=[{'project': project}])
-    return render(request, 'spinner/piece_inputs_form.html', {'formset': formset})
+    project = get_object_or_404(Project, id=pk)
+    current_pieces = PieceInputs.objects.filter(project=project)
+    print(current_pieces)
+    PieceFormSet = formset_factory(PieceInputsForm, extra=1)
+    return render(request, 'spinner/pieces_create_form.html', {'formset': PieceFormSet, 'current_pieces': current_pieces})
 
 def piece_backgrounds(pk):
     project = Project.objects.get(id=pk)
@@ -100,5 +129,44 @@
     return redirect('project_detail_view', pk=pk)
 
 def piece_inputs_for_project(request, project_id):
-    # Your view logic here
-    pass
+    project = get_object_or_404(Project, id=project_id)
+    piece_inputs = PieceInputs.objects.filter(project=project)
+    return render(request, 'spinner/pieces_create_form.html', {'piece_inputs': piece_inputs})
+
+
+def update_piece_inputs(request, pk):
+    project = get_object_or_404(Project, id=pk)
+    current_pieces = PieceInputs.objects.filter(project=project)
+    PieceFormSet = modelformset_factory(PieceInputs, form=PieceInputsForm, extra=1)  # Using modelformset_factory now
+    current_piece_inputs = PieceInputs.objects.filter(project=project)
+
+    if request.method == 'POST':
+        formset = PieceFormSet(request.POST, request.FILES, queryset=current_piece_inputs, prefix='piece')
+        if formset.is_valid():
+            formset.save()
+            return redirect('project_detail_view', pk=pk)
+    else:
+        formset = PieceFormSet(queryset=current_piece_inputs, prefix='piece')
+
+    return render(request, 'spinner/piece_update_form.html', {'formset': formset, 'current_pieces': current_pieces})
+
+
+def edit_single_piece_input(request, piece_id):
+    piece = get_object_or_404(PieceInputs, id=piece_id)
+    if request.method == 'POST':
+        form = PieceInputsForm(request.POST, request.FILES, instance=piece)
+        if form.is_valid():
+            form.save()
+            return redirect('piece_inputs', pk=piece.project.id)  # Redirect back to the list
+    else:
+        form = PieceInputsForm(instance=piece)
+    return render(request, 'spinner/single_piece_edit_form.html', {'form': form})
+
+
+def delete_single_piece_input(request, piece_id):
+    piece = get_object_or_404(PieceInputs, id=piece_id)
+    if request.method == 'POST':
+        piece.delete()
+        return redirect('piece_inputs', pk=piece.project.id)
+    return render(request, 'spinner/single_piece_delete_form.html', {'piece': piece})
+
Index: ../lsg2/spin_cycle/spinner/templates/spinner/single_piece_edit_form.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../lsg2/spin_cycle/spinner/templates/spinner/single_piece_edit_form.html b/../lsg2/spin_cycle/spinner/templates/spinner/single_piece_edit_form.html
new file mode 100644
--- /dev/null	(date 1698676615071)
+++ b/../lsg2/spin_cycle/spinner/templates/spinner/single_piece_edit_form.html	(date 1698676615071)
@@ -0,0 +1,14 @@
+{% extends "spinner/base.html" %}
+{% block title %}Edit Piece{% endblock %}
+
+{% block content %}
+<h2>Delete Piece: {{ form.piece_name.value }}</h2>
+
+<form method="post" enctype="multipart/form-data">
+    {% csrf_token %}
+    {{ form.as_p }}
+    <button type="submit">Update</button>
+</form>
+
+<a href="{% url 'piece_inputs' form.instance.project.id %}">Back to Pieces List</a>
+{% endblock %}
Index: ../lsg2/spin_cycle/spinner/templates/spinner/pieces_create_form.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><form method=\"post\" enctype=\"multipart/form-data\">\r\n    {% csrf_token %}\r\n    {{ form.as_p }}\r\n    <button type=\"submit\">Submit</button>\r\n</form>\r\n\r\n<!-- Button to trigger Google Sheet OAuth2 -->\r\n<a href=\"{% url 'google_oauth2_url' %}\">Connect to Google Sheet</a>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../lsg2/spin_cycle/spinner/templates/spinner/pieces_create_form.html b/../lsg2/spin_cycle/spinner/templates/spinner/pieces_create_form.html
--- a/../lsg2/spin_cycle/spinner/templates/spinner/pieces_create_form.html	(revision 2e2f2ac8dc45930e657c4725ae9a6088cbab3662)
+++ b/../lsg2/spin_cycle/spinner/templates/spinner/pieces_create_form.html	(date 1698676614996)
@@ -1,8 +1,29 @@
+{% extends "spinner/base.html" %}
+{% block title %}Spin Cycle{% endblock %}
+
+{% block content %}
+<a href = "{% url 'piece_bulk_update' project_id %}">Upload in Bulk</a>
+    <a href = "{% url 'project_delete_view' project.id %}">Delete Project</a>
+<!-- Display the list of pieces -->
+<h2>Pieces in Project</h2>
+<ul>
+{% for piece in piece_inputs %}
+    <li>
+        {{ piece.piece_name }} - {{ piece.keyword }} - {{ piece.location }}
+        <!-- Add edit and delete links next to each piece if needed -->
+        <a href="{% url 'piece_edit_view' piece.id %}">Edit</a>
+    </li>
+{% endfor %}
+</ul>
+<h2>Add or edit pieces</h2>
+<!-- Display the formset for adding/editing pieces -->
 <form method="post" enctype="multipart/form-data">
     {% csrf_token %}
-    {{ form.as_p }}
+    {{ formset.management_form }}
+    {% for form in formset %}
+        {{ form.as_p }}
+    {% endfor %}
     <button type="submit">Submit</button>
 </form>
 
-<!-- Button to trigger Google Sheet OAuth2 -->
-<a href="{% url 'google_oauth2_url' %}">Connect to Google Sheet</a>
+{% endblock %}
Index: ../lsg2/spin_cycle/spinner/templates/spinner/pieces_update_form.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../lsg2/spin_cycle/spinner/templates/spinner/pieces_update_form.html b/../lsg2/spin_cycle/spinner/templates/spinner/pieces_update_form.html
new file mode 100644
--- /dev/null	(date 1698676615050)
+++ b/../lsg2/spin_cycle/spinner/templates/spinner/pieces_update_form.html	(date 1698676615050)
@@ -0,0 +1,29 @@
+{% extends "spinner/base.html" %}
+{% block title %}Spin Cycle{% endblock %}
+
+{% block content %}
+
+    <a href = "{% url 'upload_csv' project %}">Upload in Bulk</a>
+    <!-- Display the list of current pieces -->
+<h2>Current Pieces</h2>
+
+<ul>
+    {% for piece in current_pieces %}
+    <li>
+        {{ piece.piece_name }} - {{ piece.keyword }}
+        <!-- Optionally, provide an edit link for individual pieces. This would require a separate detailed edit view. -->
+        <a href="{% url 'piece_detail_edit' piece.id %}">Edit</a>
+    </li>
+    {% endfor %}
+</ul>
+
+<h2>Add or Edit Pieces</h2>
+<form method="post" enctype="multipart/form-data">
+    {% csrf_token %}
+    {{ formset.management_form }}
+    {% for form in formset %}
+    {{ form.as_p }}
+    {% endfor %}
+    <button type="submit">Submit</button>
+</form>
+{% endblock %}
Index: ../lsg2/spin_cycle/spinner/templates/spinner/upload_csv.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../lsg2/spin_cycle/spinner/templates/spinner/upload_csv.html b/../lsg2/spin_cycle/spinner/templates/spinner/upload_csv.html
new file mode 100644
--- /dev/null	(date 1698676615101)
+++ b/../lsg2/spin_cycle/spinner/templates/spinner/upload_csv.html	(date 1698676615101)
@@ -0,0 +1,13 @@
+{% extends "spinner/base.html" %}
+{% block title %}Upload CSV{% endblock %}
+
+{% block content %}
+<h2>Upload CSV for {{ project.name }}</h2>
+
+<form method="post" enctype="multipart/form-data">
+    {% csrf_token %}
+    {{ form.as_p }}
+    <button type="submit">Upload</button>
+</form>
+
+{% endblock %}
Index: ../lsg2/spin_cycle/spinner/urls.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.urls import path\r\n\r\nfrom . import views\r\n\r\nurlpatterns = [\r\n  path(\"\", views.ProjectList.as_view(), name='home'),\r\n  path(\"project/list\", views.ProjectList.as_view(), name=\"projectlist\"),\r\n  path(\"project/create\", views.ProjectCreate.as_view(), name=\"projectcreate\"),\r\n  path('project/<int:pk>/', views.ProjectDetailView.as_view(), name='project_detail_view'),\r\n  path('project/<int:pk>/update/', views.ProjectUpdate.as_view(), name='project_update_view'),\r\n  path('project/<int:pk>/delete/', views.ProjectDelete.as_view(), name='project_delete_view'),\r\n    path('project/<int:pk>/pieceinputs/', views.piece_inputs, name='piece_inputs'),\r\n    path('project/<int:pk>/piecebackgrounds/', views.piece_backgrounds, name='piece_backgrounds'),\r\npath('project/<int:project_id>/pieces/', views.piece_inputs_for_project, name='piece_inputs_for_project'),\r\n  path('projects/', views.ProjectList.as_view(), name='project_list'),\r\n]
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../lsg2/spin_cycle/spinner/urls.py b/../lsg2/spin_cycle/spinner/urls.py
--- a/../lsg2/spin_cycle/spinner/urls.py	(revision 2e2f2ac8dc45930e657c4725ae9a6088cbab3662)
+++ b/../lsg2/spin_cycle/spinner/urls.py	(date 1698676615011)
@@ -11,6 +11,8 @@
   path('project/<int:pk>/delete/', views.ProjectDelete.as_view(), name='project_delete_view'),
     path('project/<int:pk>/pieceinputs/', views.piece_inputs, name='piece_inputs'),
     path('project/<int:pk>/piecebackgrounds/', views.piece_backgrounds, name='piece_backgrounds'),
-path('project/<int:project_id>/pieces/', views.piece_inputs_for_project, name='piece_inputs_for_project'),
   path('projects/', views.ProjectList.as_view(), name='project_list'),
+  path('piece/<int:piece_id>/edit/', views.edit_single_piece_input, name='piece_detail_edit'),
+  path('piece/<int:piece_id>/delete/', views.delete_single_piece_input, name='piece_detail_delete'),
+  path('project/<int:pk>/bulkupdate/', views.upload_csv, name='piece_bulk_update'),
 ]
\ No newline at end of file
Index: ../lsg2/spin_cycle/spinner/templates/spinner/single_piece_delete_form.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../lsg2/spin_cycle/spinner/templates/spinner/single_piece_delete_form.html b/../lsg2/spin_cycle/spinner/templates/spinner/single_piece_delete_form.html
new file mode 100644
--- /dev/null	(date 1698676615080)
+++ b/../lsg2/spin_cycle/spinner/templates/spinner/single_piece_delete_form.html	(date 1698676615080)
@@ -0,0 +1,14 @@
+{% extends "spinner/base.html" %}
+{% block title %}Delete Piece{% endblock %}
+
+{% block content %}
+<h2>Delete Piece: {{ form.piece_name.value }}</h2>
+
+<form method="post" enctype="multipart/form-data">
+    {% csrf_token %}
+    {{ form.as_p }}
+    <button type="submit">Update</button>
+</form>
+
+<a href="{% url 'piece_inputs' form.instance.project.id %}">Back to Pieces List</a>
+{% endblock %}
Index: ../lsg2/spin_cycle/spinner/forms.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django import forms\r\nfrom .models import Project, PieceBackground, Piece, PieceInputs\r\n\r\nclass ProjectCreateForm(forms.ModelForm):\r\n  class Meta:\r\n    model = Project\r\n    fields = (\"project_id\", \"brand\", \"location\")\r\n\r\n\r\nclass PieceInputsForm(forms.ModelForm):\r\n    csv_file = forms.FileField(required=False, label='Upload CSV')  # Existing CSV upload field\r\n\r\n    class Meta:\r\n        model = PieceInputs\r\n        fields = (\"project\", \"piece_name\", \"keyword\", \"location\", \"old_content_link\", \"include_data\", \"csv_file\")\r\n\r\n\r\nclass PieceCreateForm(forms.ModelForm):\r\n    class Meta:\r\n        model = PieceBackground\r\n        fields = (\"piece_inputs\", \"outline\", \"research\")\r\n\r\nclass PieceUpdateForm(forms.ModelForm):\r\n    class Meta:\r\n        model = PieceBackground\r\n        fields = (\"piece_inputs\", \"outline\", \"research\")\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../lsg2/spin_cycle/spinner/forms.py b/../lsg2/spin_cycle/spinner/forms.py
--- a/../lsg2/spin_cycle/spinner/forms.py	(revision 2e2f2ac8dc45930e657c4725ae9a6088cbab3662)
+++ b/../lsg2/spin_cycle/spinner/forms.py	(date 1698676615021)
@@ -1,5 +1,5 @@
 from django import forms
-from .models import Project, PieceBackground, Piece, PieceInputs
+from .models import Project, PieceBackground, Piece, PieceInputs, CSVUpload
 
 class ProjectCreateForm(forms.ModelForm):
   class Meta:
@@ -25,3 +25,8 @@
         model = PieceBackground
         fields = ("piece_inputs", "outline", "research")
 
+class UploadCSVForm(forms.ModelForm):
+    class Meta:
+        model = CSVUpload
+        fields = ['uploaded_file']
+
diff --git a/../lsg2/spin_cycle/spinner/templates/spinner/project_content_detail_view.html b/../lsg2/spin_cycle/spinner/templates/spinner/project_content_detail_view.html
new file mode 100644
diff --git a/../lsg2/spin_cycle/spinner/templates/spinner/show_project_backgrounds.html b/../lsg2/spin_cycle/spinner/templates/spinner/show_project_backgrounds.html
new file mode 100644
diff --git a/../lsg2/spin_cycle/spinner/templates/spinner/project_content_overview.html b/../lsg2/spin_cycle/spinner/templates/spinner/project_content_overview.html
new file mode 100644
